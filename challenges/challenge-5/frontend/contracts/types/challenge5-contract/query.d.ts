// Generated by dedot cli

import type { GenericSubstrateApi } from 'dedot/types';
import type { Result, AccountId32Like, BytesLike } from 'dedot/codecs';
import type {
  GenericContractQuery,
  GenericContractQueryCall,
  ContractCallOptions,
  GenericContractCallResult,
  ContractCallResult,
} from 'dedot/contracts';
import type { InkPrimitivesLangError, MinidaoCommonDaoError, SuperdaoTraitsError } from './types';

export interface ContractQuery<ChainApi extends GenericSubstrateApi> extends GenericContractQuery<ChainApi> {
  /**
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0xa148a32a
   **/
  getName: GenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<string, ContractCallResult<ChainApi>>>
  >;

  /**
   *
   * @param {AccountId32Like} voter
   * @param {ContractCallOptions} options
   *
   * @selector 0x81b2cf8b
   **/
  registerVoter: GenericContractQueryCall<
    ChainApi,
    (
      voter: AccountId32Like,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<Result<[], MinidaoCommonDaoError>, ContractCallResult<ChainApi>>>
  >;

  /**
   *
   * @param {AccountId32Like} voter
   * @param {ContractCallOptions} options
   *
   * @selector 0xa4279724
   **/
  deregisterVoter: GenericContractQueryCall<
    ChainApi,
    (
      voter: AccountId32Like,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<Result<[], MinidaoCommonDaoError>, ContractCallResult<ChainApi>>>
  >;

  /**
   *
   * @param {AccountId32Like} voter
   * @param {ContractCallOptions} options
   *
   * @selector 0xf7156a78
   **/
  hasVoter: GenericContractQueryCall<
    ChainApi,
    (
      voter: AccountId32Like,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<boolean, ContractCallResult<ChainApi>>>
  >;

  /**
   *
   * @param {AccountId32Like} voter
   * @param {BytesLike} encodedExtrinsic
   * @param {bigint} feeMax
   * @param {bigint} refTime
   * @param {bigint} proofSize
   * @param {ContractCallOptions} options
   *
   * @selector 0x547cc8db
   **/
  createSuperdaoCrossChainProposal: GenericContractQueryCall<
    ChainApi,
    (
      voter: AccountId32Like,
      encodedExtrinsic: BytesLike,
      feeMax: bigint,
      refTime: bigint,
      proofSize: bigint,
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<Result<number, SuperdaoTraitsError>, MinidaoCommonDaoError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {AccountId32Like} voter
   * @param {ContractCallOptions} options
   *
   * @selector 0x0071768f
   **/
  createContractCallProposal: GenericContractQueryCall<
    ChainApi,
    (
      voter: AccountId32Like,
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<Result<number, SuperdaoTraitsError>, MinidaoCommonDaoError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x9bcaeb73
   **/
  updateValue: GenericContractQueryCall<
    ChainApi,
    (
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<Result<[], MinidaoCommonDaoError>, ContractCallResult<ChainApi>>>
  >;

  /**
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0xca6f2170
   **/
  getValue: GenericContractQueryCall<
    ChainApi,
    (options?: ContractCallOptions) => Promise<GenericContractCallResult<number, ContractCallResult<ChainApi>>>
  >;

  /**
   *
   * @param {number} proposalId
   * @param {boolean} vote
   * @param {AccountId32Like} voter
   * @param {ContractCallOptions} options
   *
   * @selector 0x946595e4
   **/
  voteProposal: GenericContractQueryCall<
    ChainApi,
    (
      proposalId: number,
      vote: boolean,
      voter: AccountId32Like,
      options?: ContractCallOptions,
    ) => Promise<GenericContractCallResult<Result<[], MinidaoCommonDaoError>, ContractCallResult<ChainApi>>>
  >;
}
